Problem 1: Majority Elements  
 
Given an array nums of size n, return the majority element. The majority element is the 
element that appears more than ⌊n / 2⌋ times. You may assume that the majority element 
always exists in the array.  
  
Solution :  
 
        #include <iostream>  
        #include <vector>  
  
        int majorityElement(const std::vector<int>& nums) {         
int candidate = 0, count = 0;         // Phase 1: Find the 
candidate         for (int num : nums) {         if (count == 0) {             
candidate = num;             count = 1;  
        } else if (num == candidate) {             
count++;         } else {             count--;  
        }  
        }  
  
    // Phase 2: Verify the candidate (Optional since problem guarantees majority    
element)      count = 0;      for (int num : nums) {      if (num == candidate) {      
count++;  
        }  
    }  
  
    if (count > nums.size() / 2) {         
return candidate; 
}  
throw std::runtime_error("No majority element found.");  
}  
int main() {     
1, 1, 1, 2, 2};    
std::vector<int> nums = {2, 2, 
 try {  
std::cout << "Majority Element: " << majorityElement(nums) << std::endl;  
} catch (const std::exception& e) {         
std::cerr << e.what() << std::endl;  
}     
return 0;  
}  
---------------------------------------------------------------------------

Problem 2:  Pascal's Triangle  
Given an integer numRows, return the first numRows of Pascal's triangle. In  
Pascal's triangle, each number is the sum of the two numbers directly above it  

Solution:   

#include <iostream> 
#include <vector>  
std::vector<std::vector<int>> 
triangle[i].resize(i + 1, 1);         
generate(int 
numRows) 
{     
std::vector<std::vector<int>> triangle(numRows);     for (int i = 0; i < numRows; ++i) 
{         
for (int j = 1; j < i; ++j) {             
= triangle[i - 1][j - 1] + triangle[i - 1][j];  
}}     return triangle;} int main() {     int 
numRows = 5; // Example input     auto result = generate(numRows);     for (const auto& row : 
result) {        
 for (int num : row) std::cout << 
num << " ";        
0;}  
Output:  
 std::cout << "\n";}     
return 0;
--------------------------------------------------------------------------------
Problem 3: Single Number  
Given a non-empty array of integers nums, every element appears twice except 
for one. Find that single one. You must implement a solution with a linear runtime 
complexity and use only constant extra space.  

Solution:  
#include <iostream>  
#include <vector>  
int result = 0;    
int singleNumber(const std::vector<int>& nums) 
{     
 for (int num : nums) {         
result ^= num;  
}    
 return 
result; }  
int main() {     
std::vector<int> nums = {4, 1, 2, 1, 2}; // Example input     
std::cout << "Single Number: " << singleNumber(nums) << std::endl;     
return 0;  
}  
-----------------------------------------------------------------------------
Problem 6: Remove Element  
Given an integer array nums sorted in non-decreasing order, remove the duplicates in
place such that each unique element appears only once. The relative order of the 
elements should be kept the same. Then return the number of unique elements in nums. 
Consider the number of unique elements of nums to be k, to get accepted, you need to 
do the following things: Change the array nums such that the first k elements of nums 
contain the unique elements in the order they were present in nums initially. The 
remaining elements of nums are not important as well as the size of nums. Return k.  
Solution:  
#include <iostream>  
#include <vector>  
int removeDuplicates(std::vector<int>& nums) {  
if (nums.empty()) return 0;  
int k = 1;  // Pointer for the next unique element    
nums.size(); ++i) {        
 if (nums[i] != nums[i - 1]) {             
nums[i];  // Move the unique element to the front}}    
unique elements} int main() {     
 for (int i = 1; i < 
nums[k++] = 
 return k;  // Number of 
std::vector<int> nums = {0,0,1,1,1,2,2,3,3,4};     
int k = removeDuplicates(nums);  
std::cout << "k = " << k << std::endl;     
std::cout << "Modified array: ";    
 for (int i = 
0; i < k; ++i) {  
std::cout << nums[i] << " ";  
}  
std::cout << std::endl;  
return 0;

