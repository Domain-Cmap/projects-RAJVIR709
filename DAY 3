 
1. Fibonacci Series Using Recursion                                                 
  
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci 
sequence, such that each number is the sum of the two preceding ones, starting from 0 and 
1. That is,  
F(0) = 0, F(1) = 1  
F(n) = F(n - 1) + F(n - 2), for n > 1.  
Given n, calculate F(n).  
Example 1:  
Input: n = 2  
Output: 1  
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1 Example 
2:  
Input: n = 3  
Output: 2  
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2. 
Constraints:  
0 <= n <= 30  
------------------------------------------------------
Implementation/Code:  
#include <iostream>       
namespace std;  
int fibonacci(int n) { 
    if (n <= 
1) return n;  
return fibonacci(n - 1) + fibonacci(n - 2);  
}  
int main() {    
 int n;  
cin >> n;  
if(n>=0 && n<=30)  
{  
cout << fibonacci(n) << endl;  
}     else  
{  
cout<<"Invalid input.";  
return 1;  
}     return 0;  
}  

2. Reverse Linked List                                                                           
(Easy)  
Given the head of a singly linked list, reverse the list, and return the reversed list.  
Example 1:  
Input: head = [1,2,3,4,5] 
Output: [5,4,3,2,1]  
Example 2:  
Input: head = [1,2]  
Output: [2,1]  
Constraints:  
The number of nodes in the list is the range [0, 5000].  -5000 <= Node.val <= 5000  
Follow up: A linked list can be reversed either iteratively or recursively. Could you implement 
both?  
Implementation/Code:  
#include <iostream>       
namespace std;  
// Definition for singly-linked list. struct 
ListNode {     int val;  
ListNode* next;  
ListNode(int x) : val(x), next(nullptr) {}  
};  
// Iterative approach to reverse the linked list  
ListNode* reverseListIterative(ListNode* head) {  
ListNode* prev = nullptr;  
ListNode* current = head;  
while (current != nullptr) {  
                                                           //Programming in C++ using 
ListNode* nextNode = current->next; // Save the next node  
current->next = prev;               // Reverse the link         prev = 
current;
                     //
 Move prev to current         
nextNode;                 // Move current to next node  
}  
return prev; // New head of the reversed list  
current = 
} 
// Recursive approach to reverse the linked list  
ListNode* reverseListRecursive(ListNode* head) {     // Base 
case: If the list is empty or has one node     
if (head == 
nullptr || head->next == nullptr) {  
return head;  
}  
// Reverse the rest of the list  
ListNode* newHead = reverseListRecursive(head->next);  
// Adjust the pointers     head->next->next = 
head;  
head->next = nullptr;  
return newHead;  
}  
// Helper function to print the linked list void 
printList(ListNode* head) {    
while (head != nullptr) { 
<< ", ";  
head = head->next;  
}  
cout <<"]"<< endl;  
}  
 cout<<"[";     
        cout << head->val 
// Main function to test the solution int main() {  
// Example 1: Create the linked list [1, 2, 3, 4, 5]     
ListNode* head = new ListNode(1);     head->next = new 
ListNode(2);     head->next->next = new ListNode(3);     
head->next->next->next = new ListNode(4);  
head->next->next->next->next = new ListNode(5);  
cout << "Original List: ";  
printList(head);  
// Test iterative reversal 
ListNode* reversedIterative = reverseListIterative(head);     cout << 
"Reversed List (Iterative): ";  
printList(reversedIterative);  
// Reset the list for recursive test     head = new 
ListNode(1);     head->next = new ListNode(2);     head
>next->next = new ListNode(3);     head->next->next
>next = new ListNode(4);  
head->next->next->next->next = new ListNode(5);  
// Test recursive reversal  
ListNode* reversedRecursive = reverseListRecursive(head);     cout << 
"Reversed List (Recursive): ";  
printList(reversedRecursive);  
return 0;  
}  
----------------------------------------------------------------------------------
3. Add Two Numbers                                                                          
(Medium)  
You are given two non-empty linked lists representing two non-negative integers. The digits are 
stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and 
return the sum as a linked list.  
You may assume the two numbers do not contain any leading zero, except the number 0 itself.  
Example 1:  
Input: l1 = [2,4,3], l2 = [5,6,4] 
Output: [7,0,8]  
Explanation: 342 + 465 = 807.  
Example 2:  
Input: l1 = [0], l2 = [0] Output: [0]  
Example 3:  
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]  
Output: [8,9,9,9,0,0,0,1]  
Constraints:  
The number of nodes in each linked list is in the range [1, 100].  
0 <= Node.val <= 9  
It is guaranteed that the list represents a number that does not have leading zeros.  
Implementation/Code:  
#include <iostream>       
namespace std;  
struct ListNode {     int val;  
ListNode* next;  
ListNode(int x) : val(x), next(nullptr) {}  
};  
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {  
ListNode* dummy = new ListNode(0);  
ListNode* current = dummy;     int 
carry = 0;     while (l1 || l2 || carry) {         
int sum = carry;         if (l1) {             
sum += l1->val;
             l 1 = l1->next;  
}         if (l2) {         
+= l2->val;
 >next;  
}  
carry = sum / 10;
    sum 
             l2 = l2
         current->next = new 
ListNode(sum % 10);  
current = current->next;  
}  
                                                           //Programming in C++ using 
return dummy->next; 
}  
int main() {    
 int n1, n2, val;
     cin 
>> n1;     ListNode* l1 = nullptr;     
ListNode* tail1 = nullptr;     for (int i 
= 0; i < n1; ++i) {         cin >> val;  
ListNode* newNode = new ListNode(val);   
(!l1) l1 = tail1 = newNode;         else {             tail1
>next = newNode;  
tail1 = newNode;  
}  
}  
cin >> n2;     ListNode* l2 = 
nullptr;     ListNode* tail2 = nullptr;     
for (int i = 0; i < n2; ++i) {         cin 
>> val;  
ListNode* newNode = new ListNode(val);  
if (!l2) l2 = tail2 = newNode;         else {  
tail2->next = newNode;  
tail2 = newNode;  
}  
}  
ListNode* result = addTwoNumbers(l1, l2);     while 
(result) {    
      if 
     cout << result->val << " ";         result = 
result->next;  
}     return 0;  
}  

4. Wildcard Matching

(Hard)  
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for 
'?' and '*' where:  
'?' Matches any single character.  
'*' Matches any sequence of characters (including the empty sequence). The 
matching should cover the entire input string (not partial).  
Example 1: 
Input: s = "aa", p = "a"  
Output: false  
Explanation: "a" does not match the entire string "aa".  
Example 2:  
Input: s = "aa", p = "*"  
Output: true  
Explanation: '*' matches any sequence.  
Example 3:  
Input: s = "cb", p = "?a"  
Output: false  
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.  
Constraints:  
0 <= s.length, p.length <= 2000 s contains only lowercase 
English letters. p contains only lowercase English letters, 
'?' or '*'.  

Implementation/Code:

#include <iostream>                                                                  
#include <vector> using 
namespace std;  
//Programming in C++ 
bool isMatch(string s, string p) {     int m = 
s.size(), n = p.size();  
vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));     dp[0][0] = 
true;  
for (int j = 1; j <= n; ++j)  
if (p[j - 1] == '*') dp[0][j] = dp[0][j - 1];  
for (int i = 1; i <= m; ++i) {         for (int j = 1; j <= 
n; ++j) {             if (p[j - 1] == '?' || p[j - 1] == s[i - 
1])
                 dp[i][j] = dp[i - 1][j - 1];  
else if (p[j - 1] == '*')  
dp[i][j] = dp[i - 1][j] || dp[i][j - 1];  
}  
}  
return dp[m][n];  
}  
int main() {    
 string s, p;     
cin >> s >> p;  
cout << (isMatch(s, p) ? "true" : "false") << endl;     return 0;  
}  
-----------------------------------------------------------------------------------

5. Special Binary String                                                                  
Special binary strings are binary strings with the following two properties:  
The number of 0's is equal to the number of 1's.  
Every prefix of the binary string has at least as many 1's as 0's.  
You are given a special binary string s.  
(Very Hard)  
A move consists of choosing two consecutive, non-empty, special substrings of s, and swapping 
them. Two strings are consecutive if the last character of the first string is exactly one index before 
the first character of the second string.  
Return the lexicographically largest resulting string possible after applying the mentioned 
operations on the string.  
Example 1:  
Input: s = "11011000"  
Output: "11100100"  
Explanation: The strings "10" [occuring at s[1]] and "1100" [at s[3]] are swapped. This is the 
lexicographically largest string possible after some number of swaps.  
Example 2:  
Input: s = "10"  
Output: "10"  
Constraints:  
1 <= s.length <= 50  
s[i] is either '0' or '1'. s is a special 
binary string.  

Implementation/Code:  

#include <iostream>       
<string>  
#include <vector>  
#include <algorithm>  
                                                           //Programming in C++ #include 
#include <numeric> // Include this header for accumulate using 
namespace std; 
string makeLargestSpecial(string s) {  
vector<string> specials;     int count = 0, 
start = 0;     for (int i = 0; i < s.size(); ++i) 
{         count += (s[i] == '1') ? 1 : -1;         if 
(count == 0) {  
specials.push_back("1" + makeLargestSpecial(s.substr(start + 1, i - start - 1)) +  
"0");  
start = i + 1;  
}  
}  
sort(specials.rbegin(), specials.rend());  
return accumulate(specials.begin(), specials.end(), string("")); }  
int main() {    
 string s;  
cin >> s;  
cout << makeLargestSpecial(s) << endl;     return 0;  
}  
